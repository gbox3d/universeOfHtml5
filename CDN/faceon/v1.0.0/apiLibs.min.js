export default async function e({API_BASE_URL:e}){let a={1:"Checkcode mismatch",2:"Header receive error",3:"Image1 size error",4:"Image1 data error",5:"Image2 size error",6:"Image2 data error",7:"Face detect error",8:"Unknown error code",9:"Exception error",10:"Timeout error"};return{version:"1.0.0",hello:()=>fetch(`${e}/`,{method:"GET"}),async ping({token:a}){let t=await fetch(`${e}/facenet/ping`,{method:"GET",headers:{Authorization:`Bearer ${a}`}});if(t.ok){let r=await t.json();if(r.success)return r;throw Error("Server Error!")}{let o=await t.json();throw Error(o.error)}},async imageToEmbeddings(t){let r=new FormData;r.append("myfield",t,"capture.jpg");let o=await fetch(`${e}/facenet/imageToEmbedding`,{method:"POST",body:r});if(!o.ok)throw Error(`${o.status} - ${o.statusText}`);let n=await o.json();return n.success||"complete"!=n.error||(n.message=a[n.code]),n},async faceAuth(a,t){let r=await fetch(`${e}/facenet/faceAuth`,{method:"POST",headers:{"Content-Type":"application/json","x-username":""==t?t:null},body:JSON.stringify({embedding:a})});if(!r.ok){let o=await r.json();return o}let n=await r.json();return n},async getFaceFilename({token:a}){let t=await fetch(`${e}/facenet/getFaceFilename`,{method:"GET",headers:{Authorization:`Bearer ${a}`}});if(!t.ok){let r=await t.json();throw Error(r.error)}let o=await t.json();return o},async getFaceEmbedding({token:a,username:t}){let r=await fetch(`${e}/facenet/get_face_embedding`,{method:"GET",headers:{Authorization:`Bearer ${a}`,"x-username":t}});if(!r.ok){let o=await r.json();throw Error(o.error)}let n=await r.json();return n},async downloadImage({token:a,filename:t}){let r=await fetch(`${e}/facenet/download`,{method:"GET",headers:{filename:t,Authorization:`Bearer ${a}`}});if(!r.ok)throw Error(`서버 응답 오류: ${r.error}`);let o=await r.blob();return o},async uploadImage({token:a,blob:t}){let r=new FormData;r.append("myfield",t,"capture.jpg");let o=await fetch(`${e}/facenet/upload`,{method:"POST",headers:{Authorization:`Bearer ${a}`},body:r});if(!o.ok){let n=await o.json();throw Error(n.error)}let i=await o.json();return i},async faceEmbedding({token:a,blob:t,username:r}){let o=new FormData;o.append("myfield",t,"capture.jpg");let n=await fetch(`${e}/facenet/face_embedding`,{method:"POST",headers:{Authorization:`Bearer ${a}`,"x-username":r},body:o});if(!n.ok){let i=await n.json();throw Error(i.error)}let c=await n.json();return c},faceCompare:async function({blob1:a,blob2:t,token:r}){try{let o=new FormData;o.append("img1",a,"camera1.jpg"),o.append("img2",t,"camera2.jpg");let n=await fetch(`${e}/facenet/facecheck`,{method:"POST",headers:{Authorization:`Bearer ${r}`},body:o});if(!n.ok)throw Error(`서버 응답 에러: ${n.status}`);let i=await n.json();return i}catch(c){throw console.error("facecheck error:",c),c}}}};